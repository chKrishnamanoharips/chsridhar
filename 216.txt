pro1
interface Animal {
    void sound();  // Abstract method

    default void eat() {
        System.out.println("The animal eats food.");
    }

    static void sleep() {
        System.out.println("The animal sleeps.");
    }
}

class Dog implements Animal {
    public void sound() {
        System.out.println("The dog barks.");
    }
}

class Cat implements Animal {
    public void sound() {
        System.out.println("The cat meows.");
    }
}

public class InterfaceExample {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.sound();  // Output: The dog barks.
        dog.eat();    // Output: The animal eats food.

        Cat cat = new Cat();
        cat.sound();  // Output: The cat meows.
        cat.eat();    // Output: The animal eats food.

        Animal.sleep();  // Output: The animal sleeps.
    }
}
pro2
public class SecondLargestElement {

    // Method to find the second largest element in an array
    public static int findSecondLargest(int[] arr) {
        int first = Integer.MIN_VALUE;   // To store the largest element
        int second = Integer.MIN_VALUE;  // To store the second largest element

        // Traverse the array to find the largest and second largest
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > first) {
                second = first; // Update second largest to the previous largest
                first = arr[i]; // Update largest to the current element
            } else if (arr[i] > second && arr[i] != first) {
                second = arr[i]; // Update second largest if current element is smaller than largest
            }
        }

        return second; // Return the second largest element
    }

    public static void main(String[] args) {
        // Example array
        int[] arr = {12, 35, 1, 10, 34, 1};

        // Find and print the second largest element
        int secondLargest = findSecondLargest(arr);
        System.out.println("The second largest element is: " + secondLargest);
    }
}