pro1
class AgeNotValidException extends Exception {
    // Constructor that accepts a custom error message
    public AgeNotValidException(String message) {
        super(message);  // Pass the message to the parent Exception class
    }
}

public class UserDefinedExceptionExample {

    // Method that checks the age and throws custom exception if age is invalid
    public static void checkAge(int age) throws AgeNotValidException {
        if (age < 18) {
            throw new AgeNotValidException("Age must be 18 or older. Provided age: " + age);
        } else {
            System.out.println("Valid age: " + age);
        }
    }

    public static void main(String[] args) {
        try {
            // Test with an invalid age
            checkAge(15);  // This will throw the custom exception

        } catch (AgeNotValidException e) {
            // Catch and handle the custom exception
            System.out.println("Caught the exception: " + e.getMessage());
        }
    }
}
pro2
public class FibonacciRecursive {

    // Recursive method to find the nth Fibonacci number
    public static int fibonacci(int n) {
        // Base case: Fibonacci(0) = 0, Fibonacci(1) = 1
        if (n <= 1) {
            return n;
        } else {
            // Recursive case: Fibonacci(n) = Fibonacci(n-1) + Fibonacci(n-2)
            return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    public static void main(String[] args) {
        int n = 10;  // The number of terms in the Fibonacci series to display

        System.out.println("Fibonacci Series up to " + n + " terms:");

        // Print the Fibonacci series up to nth term using recursion
        for (int i = 0; i < n; i++) {
            System.out.print(fibonacci(i) + " ");
        }
    }
}